/* serverinfo: contains services information */
serverinfo {
  /* name: the name of our services */
  name = "ratbox.services";
  sid = "36D";
  description = "Hobochat services";

	dcc_low_port = 3000;
	dcc_high_port = 5000;

	reconnect_time = 5 minutes;
	ping_time = 5 minutes;
	ratbox = yes;
	client_flood_max = 20;
	client_flood_max_ignore = 30;
	client_flood_ignore_time = 5 minutes;
	client_flood_time = 1 minute;

	allow_stats_o = yes;
	allow_sslonly = no;

	default_language = "en";
};

/* email settings: these settings configure how (if at all) we send email.
 *
 * IMPORTANT: sending emails carries with it a risk of exposing the
 * hidden ips of services servers -- your local mail server should
 * take whatever steps are necessary to avoid disclosing private
 * ips.  Ideally, this would involve relaying through another
 * (public) mail server which strips out originating headers.
 */
email {
	disable_email = yes;
	email_program = "/usr/sbin/sendmail", "-t";
	email_name = "services";
	email_address = "services@example.com";
	email_number = 15;
	email_duration = 1 minute;
};

/* admin: contains general admin information */
admin {
        name = "admin";
        description = "ratbox services";
        email = "<admin@services>";
};

/* connect: specifies a server to connect to, name of uplink
 *          is specified in quotation marks
 */
connect "hobochat.irc" {
        host = "127.0.0.1";
        password = "<%= @services_password -%>";
        port = 5555;
};

/* userserv - provides facilities to users for the registration of
 * usernames.  Required for channel registration.
 */
service "userserv" {
	/* nick: specify the nick of the service */
	nick = "USERSERV";

	/* username: specify the username of the service */
	username = "user";

	/* host: specify the host of the service */
	host = "services.int";

	/* realname: the real name field of the service */
	realname = "user registration service";

	/* flags: specifies options for this service
	 *   opered     - this service is opered
	 *   msg_self   - messages from this service come from its nickname,
	 *                rather than our servername
	 *   disabled   - this service is disabled
	 *   short_help - send an simple list of commands, rather than an
	 *                index containing brief documentation of each command
	 *   stealth    - service ignores any messages from normal users
	 *   		  who havent issued OLOGIN.  OLOGIN itself will 
	 *                always be accepted.  ircops are exempt.
	 *   login_help - requires normal users are logged in before HELP
	 *                can be used
	 *   wallop_adm - send server wallops when admin commands are used
	 *                jupeserv sends wallops even without this
	 *   require_shortcut - require commands to this service are sent
	 *                      using the command shortcuts (eg /chanserv)
	 */
	flags = opered, msg_self;

	/* loglevel: level to log at, 0 to disable logging
	 *   1 - Admin commands
	 *   2 - REGISTER
	 *   3 - SET, RESETPASS
	 *   4 - 
	 *   5 - LOGIN
	 */
	loglevel = 5;

	/* register limits: amount of user registrations to allow overall
	 * from all clients, in the given time
	 */
	register_time = 1 minute;
	register_amount = 5;

	/* host register limits: amount of user registrations to allow from
	 * a specific host, in the given time
	 */
	host_register_time = 1 day;
	host_register_amount = 2;

	/* register email: require an email address to register a username */
	register_email = no;

	/* register verify: ignore the password the user supplies when
	 * registering a username and email them a password instead.
	 */
	register_verify = no;

	/* expire times: these durations control how long usernames can be
	 * unused before they are expired.  Settings are for normal
	 * usernames, suspended usernames and unverified usernames.
	 */
	expire_time = 6 weeks;
	expire_suspended_time = 4 weeks;
	expire_unverified_time = 1 day;

	/* expiry bonuses: these allow you to grant extra expiry bonuses to
	 * usernames that have been registered for a given length of time,
	 * extending the length of time they can be unused before expiry.
	 */
	/* expire bonus regtime: start granting expiry bonuses once a
	 * username has been registered for this length of time
	 */
	expire_bonus_regtime = 2 months;

	/* expire bonus: grant an expiry bonus of a given duration, for
	 * every length of time a username has been registered, upto a
	 * maximum bonus of a given limit.
	 */
	expire_bonus = 1 day;
	expire_bonus_per_time = 2 weeks;
	expire_bonus_max = 4 weeks;

	allow_set_password = yes;
	allow_resetpass = no;
	allow_resetemail = no;
	resetpass_duration = 1 day;
	resetemail_duration = 1 day;
	reset_regtime_duration = 2 weeks;

	/* allow set email: allow users to change their email addy */
	allow_set_email = yes;
	max_logins = 5;

	show_suspend_reasons = no;
};

/* chanserv - provides facilities for the registration of channels. */
service "chanserv" {
	nick = "CHANSERV";
	username = "chan";
	host = "services.int";
	realname = "channel registration service";
	flags = opered, login_help;

	/* loglevel: level to log at, 0 to disable logging
	 *   1 - Admin commands
	 *   2 - REGISTER
	 *   3 - LISTUSERS, DELOWNER
	 *   4 - CLEARMODES, CLEAROPS, CLEARALLOPS, CLEARBANS
	 *   5 - ADDUSER, DELUSER, MODUSER
	 *   6 - Everything.
	 */
	loglevel = 3;

	register_time = 1 minute;
	register_amount = 5;

	host_register_time = 1 day;
	host_register_amount = 4;

	expire_time = 4 weeks;
	expire_suspended_time = 4 weeks;
	max_bans = 100;

	expireban_frequency = 60 minutes;
	enforcetopic_frequency = 1 hour;

	autojoin_empty = no;
	email_delowner = no;
	delowner_duration = 1 day;

	show_suspend_reasons = no;
};

/* nickserv - provides nickname registration.  These require a username
 * registration.
 */
service "nickserv" {
	nick = "NICKSERV";
	username = "nick";
	host = "services.int";
	realname = "nickname services";

	flags = opered, msg_self;

	/* loglevel: level to log at, 0 to disable logging
	 *   1 - Admin commands
	 *   2 - REGISTER
	 *   3 - DROP
	 *   4 -
	 *   5 - INFO
	 */
	loglevel = 5;
	max_nicks = 2;

	allow_set_warn = yes;
	warn_string = "This nickname is registered, you may be disconnected if a user regains this nickname.";
};

/* operserv - provides facilities for issuing modes and takeovers */
service "operserv" {
	nick = "OPERSERV";
	username = "oper";
	host = "services.int";
	realname = "oper services";
	flags = opered, msg_self, stealth, wallop_adm;

	loglevel = 1;
	allow_die = yes;
};

/* jupeserv - provides opers and admins the ability to jupe servers
 * preventing them from connecting to the network.
 */
service "jupeserv" {
	nick = "JUPESERV";
	username = "jupe";
	host = "services.int";
	realname = "server jupe service";
	flags = opered, msg_self, stealth;

	loglevel = 2;
	merge_into_operserv = no;
	oper_score = 3;
	jupe_score = 15;
	unjupe_score = 15;
	pending_time = 30 minutes;
};

/* operbot - a bot which will invite/op ircops in the set channels.   Useful
 * for oper only channels etc.
 */
service "operbot" {
	nick = "operbot";
	username = "operbot";
	host = "services.int";
	realname = "oper op/invite services";
	flags = opered, msg_self, stealth;

	loglevel = 1;
};

/* alis - a list service that lets users list channels according to more
 * specific criteria than an ircd allows.
 */
service "alis" {
	nick = "alis";
	username = "alis";
	host = "services.int";
	realname = "Advanced List Service - /msg alis help";
	flags = msg_self;

	loglevel = 1;
	max_matches = 60;
};

/* global - the global messaging service.  Allows messages to be sent
 * to all users on the network.
 */
service "global" {
	nick = "GLOBAL";
	username = "global";
	host = "services.int";
	realname = "Network Message Service";

	/* this service *MUST* be opered. */
	flags = opered, msg_self, stealth;
	loglevel = 1;
};

/* banserv - the ban service.  Allows bans (klines/xlines/resvs) to be
 * sent to all servers.  These bans can only be set on ircd-ratbox servers
 * running version 1.5 and above.
 */
service "banserv" {
	nick = "BANSERV";
	username = "banserv";
	host = "services.int";
	realname = "Ban Service";
	flags = opered, msg_self, stealth;

	/* loglevel: level to log at, 0 to disable logging
	 *   1 - Admin commands
	 *   2 - LISTWELCOME
	 */
	loglevel = 1;

	merge_into_operserv = no;

	unban_time = 2 weeks;
	regexp_time = 1 day;
	max_kline_matches = 200;
	max_xline_matches = 200;
	max_regexp_matches = 200;
	temp_workaround = no;
	autosync_frequency = 2 weeks;
};

/* watchserv - the service for watching commands issued to services. */
service "watchserv" {
	nick = "WATCHSERV";
	username = "watchserv";
	host = "services.int";
	realname = "Command Watching Service";
	flags = msg_self, stealth;

	loglevel = 1;
	merge_into_operserv = no;
};

/* memoserv - the service for sending memos */
service "memoserv" {
	nick = "MEMOSERV";
	username = "memoserv";
	host = "services.int";
	realname = "Memo Service";
	flags = msg_self;

	loglevel = 0;
	max_memos = 50;
	memo_regtime_duration = 1 week;
};

